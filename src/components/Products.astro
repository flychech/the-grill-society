---
import ELMAMALON from '../../assets/products/el-mamalon.jpeg'
const cards = [
  {
    title: 'EL MAMALÓN',
    description:
      'Rub con sabores clásicos del norte, puedes usarlo en res, cerdo, pollo o para tus guisos favoritos.',
    imgSrc: './../assets/products/el-mamalon.jpeg'
  },
  {
    title: 'Product 2',
    description: 'Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
    imgSrc: './../assets/products/el-mamalon.jpeg'
  },
  {
    title: 'Product 3',
    description: 'Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi.',
    imgSrc: './../assets/products/el-mamalon.jpeg'
  },
  {
    title: 'Product 4',
    description: 'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum.',
    imgSrc: './../assets/products/el-mamalon.jpeg'
  },
  {
    title: 'Product 5',
    description: 'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia.',
    imgSrc: './../assets/products/el-mamalon.jpeg'
  },
  {
    title: 'Product 6',
    description: 'Mollit anim id est laborum. Curabitur pretium tincidunt lacus.',
    imgSrc: './../assets/products/el-mamalon.jpeg'
  },
  {
    title: 'Product 7',
    description: 'Mollit anim id est laborum. Curabitur pretium tincidunt lacus.',
    imgSrc: './../assets/products/el-mamalon.jpeg'
  },
  {
    title: 'Product 8',
    description: 'Mollit anim id est laborum. Curabitur pretium tincidunt lacus.',
    imgSrc: './../assets/products/el-mamalon.jpeg'
  },
  {
    title: 'Product 9',
    description: 'Mollit anim id est laborum. Curabitur pretium tincidunt lacus.',
    imgSrc: './../assets/products/el-mamalon.jpeg'
  }
]
---

<style>
  .card {
    display: flex;
    background-image: linear-gradient(to bottom left, #efdd03, rgba(249, 70, 22, 0.8));
    border-radius: 8px;
    border-color: #f94616;
    border-width: 4px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    opacity: 0;
    transform: translateY(20px) scale(0); /* Inicia fuera de la vista y pequeño */
    transition:
      opacity 0.6s ease-out,
      transform 0.6s ease-out;
    transition-delay: 0s; /* Desfase que se agregará dinámicamente */
  }

  .card.visible {
    opacity: 1;
    transform: translateY(0) scale(1); /* Aparece con el tamaño normal */
  }

  .card:hover {
    transform: translateY(-5px);
  }

  .card img {
    width: 200px;
    height: 100%;
    object-fit: cover;
  }

  .card-content {
    padding: 20px;
    flex-grow: 1;
  }

  .card h2 {
    margin: 0 0 10px;
    font-size: 1.5rem;
  }

  .card p {
    margin: 0;
    color: #666;
  }

  @media (max-width: 768px) {
    .card-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 480px) {
    .card-grid {
      grid-template-columns: 1fr;
    }

    .card {
      flex-direction: column;
    }

    .card img {
      width: 100%;
      height: auto;
      border-right: none;
      border-bottom: 1px solid #eee;
    }
  }
</style>

<div class="h-screen bg-grill-image bg-no-repeat bg-cover">
  <div class="h-full max-w-screen-2xl m-auto">
    <div class="card-grid grid grid-cols-3 gap-5 p-5 h-full">
      {
        cards.map((card) => (
          <div class="card">
            <img src={card.imgSrc} alt={card.title} />
            <div class="card-content flex flex-col">
              <h2 class="text-white">{card.title}</h2>
              <p class="flex-1 flex items-center">{card.description}</p>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>

<script>
  import { onMount } from 'solid-js'

  onMount(() => {
    const observerOptions = {
      threshold: 0.5 // El 50% de la tarjeta debe estar visible
    }

    const observer = new IntersectionObserver((entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible')
          // Deja de observar el elemento una vez que se hace visible para que la animación no se repita
          observer.unobserve(entry.target)
        }
      })
    }, observerOptions)

    const cards = document.querySelectorAll('.card')
    cards.forEach((card, index) => {
      const htmlCard = card as HTMLElement // Cast a HTMLElement
      observer.observe(htmlCard)
      // Añadir un retraso dinámico de 100ms entre cada tarjeta
      htmlCard.style.transitionDelay = `${index * 50}ms`
    })
  })
</script>
